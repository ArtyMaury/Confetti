schema {
  query: Query
}

"""
Directs the executor to include this field or fragment only when the `if` argument is true
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if`'argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
This field can be changed without warning
"""
directive @requiresOptIn (feature: String!) on FIELD_DEFINITION

"""
Marks the field, argument, input field or enum value as deprecated
"""
directive @deprecated ("The reason for the deprecation" reason: String = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|ENUM_VALUE|INPUT_FIELD_DEFINITION

"""
Exposes a URL that specifies the behaviour of this scalar.
"""
directive @specifiedBy ("The URL that specifies the behaviour of this scalar." url: String!) on SCALAR

type Configuration {
  timezone: String!
}

type PageInfo {
  endCursor: String!

  hasNextPage: Boolean!

  hasPreviousPage: Boolean!

  startCursor: String!
}

type Partner {
  logoUrl: String!

  name: String!

  order: Int!

  url: String!
}

type PartnerGroup {
  order: Int!

  partners: [Partner!]!

  title: String!
}

type Query {
  config: Configuration!

  partnerGroups: [PartnerGroup!]!

  rooms: [Room!]!

  session(id: String!): Session!

  sessions(after: String, first: Int): SessionConnection!

  speakers: [Speaker!]!

  venue(id: String!): Venue!
}

type Room {
  capacity: Int

  id: String!

  name: String!
}

type Session {
  description: String!

  endInstant: Instant! @requiresOptIn(feature: "experimental")

  id: String!

  language: String

  room: Room!

  speakers: [Speaker!]!

  startInstant: Instant! @requiresOptIn(feature: "experimental")

  tags: [String!]!

  title: String!
}

type SessionConnection {
  edges: [SessionEdge!]!

  pageInfo: PageInfo!

  totalCount: Int!
}

type SessionEdge {
  cursor: String!

  node: Session!
}

type Social {
  icon: String!

  link: String!

  name: String!
}

type Speaker {
  bio: String!

  company: String

  id: String!

  name: String!

  photoUrl: String

  socials: [Social!]!
}

type Venue {
  address: String

  coordinates: String

  description: String!

  descriptionFr: String!

  imageUrl: String!

  name: String!
}

"""
A type representing a formatted kotlinx.datetime.Instant
"""
scalar Instant
